XpV0(
    project: "enn",
    containers: {
        "main": (
            command: ["poetry", "run", "python", "-u", "enn_trainer/train.py"],
            build: [
                From("nvcr.io/nvidia/pytorch:21.03-py3"),

                // Install Poetry
                Run("curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -"),
                Env("PATH", "/root/.poetry/bin:${PATH}"),

                // Install Vulkan drivers (required by Griddly)
                Run("wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add -"),
                Run("wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list http://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list"),
                Run("apt-get update"),
                Run("DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata"),
                Run("apt-get install vulkan-sdk -y"),

                // Install Java (required by MicroRTS)
                Run("apt-get install -y --no-install-recommends software-properties-common"),
                Run("add-apt-repository -y ppa:openjdk-r/ppa"),
                Run("apt-get update"),
                Run("apt-get install -y openjdk-8-jdk"),
                Run("apt-get install -y openjdk-8-jre"),
                Run("update-alternatives --config java"),
                Run("update-alternatives --config javac"),

                // Install Rust toolchain
                Run("apt-get update"),
                Run("apt-get install curl build-essential --yes"),
                Run("curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"),
                Env("PATH", "/root/.cargo/bin:${PATH}"),

                // Cache dependencies by installing them at fixed commit (to avoid long rebuilds when changing dependencies)
                Repo(
                    paths: [
                        "pyproject.toml",
                        "poetry.lock",
                        "enn_trainer/__init__.py",
                    ],
                    target_dir: "/root/enn-trainer",
                    cd: true,
                    rev: "97964be",
                ),

                // Build xprun from source
                Repo(url: "git@github.com:cswinter/xprun.git", rev: "d8a58d8", target_dir: "/root"),
                Run("poetry run pip install maturin==0.12.6"),
                Run("poetry run maturin build --cargo-extra-args=--features=python --manifest-path=/root/xprun/Cargo.toml"),
                Run("poetry run pip install /root/xprun/target/wheels/xprun-0.1.4-cp38-cp38-manylinux_2_31_x86_64.whl"),

                Run("poetry install"),
                Run("poetry run pip install torch==1.12.0+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html"),
                Run("poetry run pip install torch-scatter -f https://data.pyg.org/whl/torch-1.12.0+cu113.html"),

                Repo(
                    paths: [
                        "pyproject.toml",
                        "poetry.lock",
                        "enn_trainer/__init__.py",
                    ],
                    target_dir: "/root/enn-trainer",
                    cd: true,
                ),
                Run("poetry install"),

                Repo(cd: true),
            ],
            gpu: 1,
            gpu_mem: "10GiB",
            cpu_mem: "10GiB",
            env_secrets: {
                "WANDB_API_KEY": "wandb-api-key",
            },
        )
    }
)
